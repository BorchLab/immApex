// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateMotif_cpp
List calculateMotif_cpp(const CharacterVector& sequences, const IntegerVector& motif_lengths, const bool discontinuous, const char gap_char, const int nthreads_requested);
RcppExport SEXP _immApex_calculateMotif_cpp(SEXP sequencesSEXP, SEXP motif_lengthsSEXP, SEXP discontinuousSEXP, SEXP gap_charSEXP, SEXP nthreads_requestedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type motif_lengths(motif_lengthsSEXP);
    Rcpp::traits::input_parameter< const bool >::type discontinuous(discontinuousSEXP);
    Rcpp::traits::input_parameter< const char >::type gap_char(gap_charSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads_requested(nthreads_requestedSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMotif_cpp(sequences, motif_lengths, discontinuous, gap_char, nthreads_requested));
    return rcpp_result_gen;
END_RCPP
}
// encodeSequences_cpp
Rcpp::List encodeSequences_cpp(const CharacterVector& sequences, std::string mode, const CharacterVector alphabet, Nullable<Rcpp::NumericMatrix> prop_mat_, const char pad_token, std::string summary, int max_len, int nthreads);
RcppExport SEXP _immApex_encodeSequences_cpp(SEXP sequencesSEXP, SEXP modeSEXP, SEXP alphabetSEXP, SEXP prop_mat_SEXP, SEXP pad_tokenSEXP, SEXP summarySEXP, SEXP max_lenSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::NumericMatrix> >::type prop_mat_(prop_mat_SEXP);
    Rcpp::traits::input_parameter< const char >::type pad_token(pad_tokenSEXP);
    Rcpp::traits::input_parameter< std::string >::type summary(summarySEXP);
    Rcpp::traits::input_parameter< int >::type max_len(max_lenSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeSequences_cpp(sequences, mode, alphabet, prop_mat_, pad_token, summary, max_len, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// fast_edge_list
DataFrame fast_edge_list(CharacterVector seqs, double thresh, Nullable<CharacterVector> v_gene, Nullable<CharacterVector> j_gene, bool match_v, bool match_j, Nullable<CharacterVector> ids, std::string metric, std::string normalize, Nullable<NumericMatrix> subst_matrix, int gap_open, int gap_extend);
RcppExport SEXP _immApex_fast_edge_list(SEXP seqsSEXP, SEXP threshSEXP, SEXP v_geneSEXP, SEXP j_geneSEXP, SEXP match_vSEXP, SEXP match_jSEXP, SEXP idsSEXP, SEXP metricSEXP, SEXP normalizeSEXP, SEXP subst_matrixSEXP, SEXP gap_openSEXP, SEXP gap_extendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type v_gene(v_geneSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type j_gene(j_geneSEXP);
    Rcpp::traits::input_parameter< bool >::type match_v(match_vSEXP);
    Rcpp::traits::input_parameter< bool >::type match_j(match_jSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::string >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type subst_matrix(subst_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type gap_open(gap_openSEXP);
    Rcpp::traits::input_parameter< int >::type gap_extend(gap_extendSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_edge_list(seqs, thresh, v_gene, j_gene, match_v, match_j, ids, metric, normalize, subst_matrix, gap_open, gap_extend));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_immApex_calculateMotif_cpp", (DL_FUNC) &_immApex_calculateMotif_cpp, 5},
    {"_immApex_encodeSequences_cpp", (DL_FUNC) &_immApex_encodeSequences_cpp, 8},
    {"_immApex_fast_edge_list", (DL_FUNC) &_immApex_fast_edge_list, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_immApex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
